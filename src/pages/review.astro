---
import '../styles/global.css';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import GoogleHead from "../components/GoogleHead.astro";
import settings from '../settings.js';
---

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8"/>
	<link rel="icon" type="image/png" href="/images/Logo.png"/>
	<meta name="viewport" content="width=device-width"/>
	<meta name="generator" content={Astro.generator}/>

	<!-- Primary Meta Tags -->
	<title>Review Us | Alltek Services | HVAC Experts in Belton, TX</title>
	<meta name="title" content="Review Us | Alltek Services | HVAC Experts in Belton, TX"/>
	<meta name="description"
	      content="The page you're looking for cannot be found. Explore our HVAC services in Belton, TX or contact us for assistance with your heating and cooling needs."/>
	<meta name="robots" content="noindex, follow"/>

	<!-- Open Graph / Facebook -->
	<meta property="og:type" content="website"/>
	<meta property="og:url" content="https://www.alltek-services.com/review/"/>
	<meta property="og:title" content="Review Us | Alltek Services | HVAC Experts in Belton, TX"/>
	<meta property="og:description"
	      content="The page you're looking for cannot be found. Explore our HVAC services in Belton, TX or contact us for assistance with your heating and cooling needs."/>
	<meta property="og:image" content="https://www.alltek-services.com/images/fleet/service-fleet.jpg"/>

	<!-- Twitter -->
	<meta property="twitter:card" content="summary_large_image"/>
	<meta property="twitter:url" content="https://www.alltek-services.com/review/"/>
	<meta property="twitter:title" content="Review Us | Alltek Services | HVAC Experts in Belton, TX"/>
	<meta property="twitter:description"
	      content="The page you're looking for cannot be found. Explore our HVAC services in Belton, TX or contact us for assistance with your heating and cooling needs."/>
	<meta property="twitter:image" content="https://www.alltek-services.com/images/fleet/service-fleet.jpg"/>

	<!-- Google Fonts -->
	<link rel="preconnect" href="https://fonts.googleapis.com">
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
	<link
		href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Open+Sans:wght@400;500;600;700&display=swap"
		rel="stylesheet">

	<GoogleHead/>
</head>
<body class="bg-white">
<Header/>

<!-- Breadcrumbs -->
<div class="bg-lightgray py-3">
	<div class="container mx-auto px-4">
		<nav class="flex" aria-label="Breadcrumb">
			<ol class="inline-flex items-center space-x-1 md:space-x-3">
				<li class="inline-flex items-center">
					<a href="/" class="text-darkgray hover:text-accent inline-flex items-center">
						<svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
							<path
								d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
						</svg>
						Home
					</a>
				</li>
				<li aria-current="page">
					<div class="flex items-center">
						<svg class="w-6 h-6 text-darkgray" fill="currentColor" viewBox="0 0 20 20"
						     xmlns="http://www.w3.org/2000/svg">
							<path fill-rule="evenodd"
							      d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
							      clip-rule="evenodd"></path>
						</svg>
						<span class="text-accent font-medium ml-1 md:ml-2">Review Us</span>
					</div>
				</li>
			</ol>
		</nav>
	</div>
</div>

<main>
	<!-- Hero Section -->
	<section class="py-16 md:py-24 bg-primary text-white">
		<div class="container mx-auto px-4">
			<div class="text-center max-w-4xl mx-auto">
				<h1 class="text-4xl md:text-5xl font-bold mb-6 font-heading">Review Us</h1>
				<p class="text-xl mb-8">How would you rate your experience with Alltek Servicess?</p>
			</div>
		</div>
	</section>

	<!-- Review Starts-->
	<section class="py-16 md:py-12 bg-white text-black">
		<div class="container mx-auto px-4 py-12 max-w-3xl text-center">
			<div class="flex flex-col items-center justify-center space-y-8 bg-white rounded-lg shadow-lg p-8">
				<div class="w-48 h-24 relative mb-4">
					<img src="/images/logo_128h.png" alt="Alltek Services Logo" class="w-full h-full object-contain"/>
				</div>

				<p class="text-gray-600 text-center">
					Your feedback helps us improve our service. Thank you for taking the time to share your experience.
				</p>

				<div class="flex items-center justify-center space-x-2 my-6">
					<button data-stars="1" class="review-stars p-2 transition-all duration-200 focus:outline-none"
					        aria-label="Rate 1 stars">
						<svg id="revew-star-5" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24"
						     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
						     class="lucide lucide-star transition-colors duration-200 text-gray-300">
							<path
								d="M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z"></path>
						</svg>
					</button>
					<button data-stars="2" class="review-stars p-2 transition-all duration-200 focus:outline-none"
					        aria-label="Rate 2 stars">
						<svg id="revew-star-2" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24"
						     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
						     class="lucide lucide-star transition-colors duration-200 text-gray-300">
							<path
								d="M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z"></path>
						</svg>
					</button>
					<button data-stars="3" class="review-stars p-2 transition-all duration-200 focus:outline-none"
					        aria-label="Rate 3 stars">
						<svg id="revew-star-3" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24"
						     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
						     class="lucide lucide-star transition-colors duration-200 text-gray-300">
							<path
								d="M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z"></path>
						</svg>
					</button>
					<button data-stars="4" class="review-stars p-2 transition-all duration-200 focus:outline-none"
					        aria-label="Rate 4 stars">
						<svg id="revew-star-4" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24"
						     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
						     class="lucide lucide-star transition-colors duration-200 text-gray-300">
							<path
								d="M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z"></path>
						</svg>
					</button>
					<button data-stars="5" class="review-stars p-2 transition-all duration-200 focus:outline-none"
					        aria-label="Rate 5 stars">
						<svg id="revew-star-5" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24"
						     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
						     class="lucide lucide-star transition-colors duration-200 text-gray-300">
							<path
								d="M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z"></path>
						</svg>
					</button>
				</div>

				<p id="rating-msg" class="text-sm text-gray-500 text-center mt-4">Select a rating</p>
			</div>
		</div>
	</section>
</main>

<Footer/>

<script>
	// Initialize starRating variables
	let starRating = 0;
	let selectedRating = 0; // To store the clicked rating

	// Get all star buttons
	const starButtons = document.querySelectorAll('.review-stars');

	// Get the rating container, message, and feedback paragraph elements
	const ratingContainer = document.querySelector('.flex.items-center.justify-center.space-x-2.my-6');
	const ratingMsg = document.getElementById('rating-msg');
	const feedbackParagraph = document.querySelector('.text-gray-600.text-center');

	// Function to get URL parameters
	function getUrlParameter(name) {
		name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
		const regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
		const results = regex.exec(location.search);
		return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
	}

	// Function to create star SVG element
	function createStarSvg(filled) {
		const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
		svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
		svg.setAttribute('width', '24'); // 50% of original size (48px)
		svg.setAttribute('height', '24'); // 50% of original size (48px)
		svg.setAttribute('viewBox', '0 0 24 24');
		svg.setAttribute('fill', filled ? '#facc15' : 'none');
		svg.setAttribute('stroke', filled ? '#facc15' : '#4B5563');
		svg.setAttribute('stroke-width', '2');
		svg.setAttribute('stroke-linecap', 'round');
		svg.setAttribute('stroke-linejoin', 'round');
		svg.classList.add('lucide', 'lucide-star', 'transition-colors', 'duration-200');
		if (filled) {
			svg.classList.add('text-yellow-400');
		} else {
			svg.classList.add('text-gray-300');
		}

		const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
		path.setAttribute('d', 'M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z');

		svg.appendChild(path);
		return svg;
	}

	// Function to create feedback form
	function createFeedbackForm(stars) {
		const formContainer = document.createElement('div');
		formContainer.className = 'mt-8 w-full';
		formContainer.id = 'feedback-form-container';

		const form = document.createElement('form');
		form.className = 'space-y-4';
		form.id = 'feedback-form';

		// Name field
		const nameDiv = document.createElement('div');
		const nameLabel = document.createElement('label');
		nameLabel.setAttribute('for', 'feedback-name');
		nameLabel.className = 'block mb-1 font-medium text-left';
		nameLabel.textContent = 'Name *';

		const nameInput = document.createElement('input');
		nameInput.type = 'text';
		nameInput.id = 'feedback-name';
		nameInput.name = 'name';
		nameInput.className = 'w-full px-4 py-2 rounded-md border border-gray-300 focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/50';
		nameInput.placeholder = 'Your Name';
		nameInput.required = true;

		nameDiv.appendChild(nameLabel);
		nameDiv.appendChild(nameInput);

		// Email field
		const emailDiv = document.createElement('div');
		const emailLabel = document.createElement('label');
		emailLabel.setAttribute('for', 'feedback-email');
		emailLabel.className = 'block mb-1 font-medium text-left';
		emailLabel.textContent = 'Email *';

		const emailInput = document.createElement('input');
		emailInput.type = 'email';
		emailInput.id = 'feedback-email';
		emailInput.name = 'email';
		emailInput.className = 'w-full px-4 py-2 rounded-md border border-gray-300 focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/50';
		emailInput.placeholder = 'Your Email';
		emailInput.required = true;

		emailDiv.appendChild(emailLabel);
		emailDiv.appendChild(emailInput);

		// Service Type field
		const serviceDiv = document.createElement('div');
		const serviceLabel = document.createElement('label');
		serviceLabel.setAttribute('for', 'feedback-service');
		serviceLabel.className = 'block mb-1 font-medium text-left';
		serviceLabel.textContent = 'Service Type *';

		const serviceSelect = document.createElement('select');
		serviceSelect.id = 'feedback-service';
		serviceSelect.name = 'service';
		serviceSelect.className = 'w-full px-4 py-2 rounded-md border border-gray-300 focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/50';
		serviceSelect.required = true;

		const defaultOption = document.createElement('option');
		defaultOption.value = '';
		defaultOption.disabled = true;
		defaultOption.selected = true;
		defaultOption.textContent = 'Select a Service';

		const services = [
			{value: 'ac-repair', text: 'AC Repair'},
			{value: 'ac-installation', text: 'AC Installation'},
			{value: 'heating-repair', text: 'Heating Repair'},
			{value: 'heating-installation', text: 'Heating Installation'},
			{value: 'maintenance', text: 'Maintenance'},
			{value: 'air-quality', text: 'Indoor Air Quality'},
			{value: 'other', text: 'Other'}
		];

		serviceSelect.appendChild(defaultOption);
		services.forEach(service => {
			const option = document.createElement('option');
			option.value = service.value;
			option.textContent = service.text;
			serviceSelect.appendChild(option);
		});

		serviceDiv.appendChild(serviceLabel);
		serviceDiv.appendChild(serviceSelect);

		// Feedback field
		const feedbackDiv = document.createElement('div');
		const feedbackLabel = document.createElement('label');
		feedbackLabel.setAttribute('for', 'feedback-text');
		feedbackLabel.className = 'block mb-1 font-medium text-left';
		feedbackLabel.textContent = 'Your Feedback *';

		const feedbackTextarea = document.createElement('textarea');
		feedbackTextarea.id = 'feedback-text';
		feedbackTextarea.name = 'feedback';
		feedbackTextarea.className = 'w-full px-4 py-2 rounded-md border border-gray-300 focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/50';
		feedbackTextarea.placeholder = 'Please share your experience and how we can improve';
		feedbackTextarea.rows = 4;
		feedbackTextarea.required = true;

		feedbackDiv.appendChild(feedbackLabel);
		feedbackDiv.appendChild(feedbackTextarea);

		// Hidden fields
		const starsInput = document.createElement('input');
		starsInput.type = 'hidden';
		starsInput.name = 'stars';
		starsInput.value = stars;

		const formTypeInput = document.createElement('input');
		formTypeInput.type = 'hidden';
		formTypeInput.name = 'af-form';
		formTypeInput.value = 'review';

		const hashInput = document.createElement('input');
		hashInput.type = 'hidden';
		hashInput.id = 'feedback-hash';
		hashInput.name = 'af-hash';
		hashInput.value = 'failed';

		const urlInput = document.createElement('input');
		urlInput.type = 'hidden';
		urlInput.id = 'feedback-url';
		urlInput.name = 'af-url';
		urlInput.value = window.location.href;

		// Submit button
		const submitButton = document.createElement('button');
		submitButton.type = 'submit';
		submitButton.className = 'w-full bg-primary hover:bg-primary/90 text-white font-bold py-2 px-4 rounded-md transition-colors';
		submitButton.textContent = 'Submit Feedback';

		// Back link
		const backLinkDiv = document.createElement('div');
		backLinkDiv.className = 'mt-4 text-left';
		backLinkDiv.id = 'back-link-container';

		const backLink = document.createElement('a');
		backLink.href = window.location.pathname;
		backLink.className = 'text-primary hover:text-primary/80';
		backLink.textContent = '← Back to Ratings';

		backLinkDiv.appendChild(backLink);

		// Add all elements to form
		form.appendChild(nameDiv);
		form.appendChild(emailDiv);
		form.appendChild(serviceDiv);
		form.appendChild(feedbackDiv);
		form.appendChild(starsInput);
		form.appendChild(formTypeInput);
		form.appendChild(hashInput);
		form.appendChild(urlInput);
		form.appendChild(submitButton);

		formContainer.appendChild(form);
		formContainer.appendChild(backLinkDiv);

		return formContainer;
	}

	// Function to update star colors based on rating
	function updateStars() {
		starButtons.forEach(button => {
			const buttonStars = parseInt(button.getAttribute('data-stars'));
			const svg = button.querySelector('svg');

			if (starRating >= buttonStars) {
				svg.classList.add('text-yellow-400');
				svg.classList.remove('text-gray-300');
				svg.setAttribute('fill', '#facc15'); // Explicit yellow-400 color
				svg.setAttribute('stroke', '#facc15'); // Match stroke to fill
			} else {
				svg.classList.remove('text-yellow-400');
				svg.classList.add('text-gray-300');
				svg.setAttribute('fill', 'none');
				svg.setAttribute('stroke', '#4B5563'); // Set stroke to specific gray color #4B5563
			}
		});
	}

	// Function to fetch refresh hash
	async function fetchRefreshHash() {
		try {
			const response = await fetch('https://api.astraforms.site/', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({action: "forminit"}),
			});

			if (response.ok) {
				const data = await response.json();
				// Populate the hidden input field with the refresh hash
				const refreshHashInput = document.getElementById('feedback-hash');
				if (refreshHashInput) {
					refreshHashInput.value = data.hash || '';
				}
			} else {
				console.error('Failed to fetch refresh hash');
			}
		} catch (error) {
			console.error('Error fetching refresh hash:', error);
		}
	}

	// Check if there's a stars parameter in the URL
	const starsParam = getUrlParameter('stars');

	if (starsParam && !isNaN(parseInt(starsParam))) {
		// Hide the original rating elements
		if (ratingContainer) ratingContainer.style.display = 'none';
		if (ratingMsg) ratingMsg.style.display = 'none';
		if (feedbackParagraph) feedbackParagraph.style.display = 'none';

		// Get the parent container
		const container = document.querySelector('.flex.flex-col.items-center.justify-center.space-y-8');

		if (container) {
			// Create a new div for the smaller stars
			const smallStarsDiv = document.createElement('div');
			smallStarsDiv.className = 'flex items-center justify-center space-x-1 my-4';

			// Add the appropriate number of filled and unfilled stars
			const numStars = parseInt(starsParam);
			for (let i = 1; i <= 5; i++) {
				const starSvg = createStarSvg(i <= numStars);
				smallStarsDiv.appendChild(starSvg);
			}

			// Create thank you message
			const thankYouMsg = document.createElement('p');
			thankYouMsg.className = 'text-gray-700 text-center mt-2 mb-6';
			thankYouMsg.textContent = `Thank you for your ${numStars}-star rating. We'd love to hear more about your experience so we can improve our service.`;

			// Create feedback form
			const feedbackForm = createFeedbackForm(numStars);

			// Add elements to the container
			container.appendChild(smallStarsDiv);
			container.appendChild(thankYouMsg);
			container.appendChild(feedbackForm);

			// Fetch refresh hash for the form
			fetchRefreshHash();

			// Add form submission handler
			const form = document.getElementById('feedback-form');
			if (form) {
				form.addEventListener('submit', async function (event) {
					event.preventDefault();

					// Create FormData object
					const formData = new FormData(this);
					// Convert FormData to JSON object
					let formDataObj = Object.fromEntries(formData.entries());
					formDataObj.action = 'submit';

					try {
						const response = await fetch('https://api.astraforms.site/', {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json',
							},
							body: JSON.stringify(formDataObj),
						});

						if (response.ok) {
							const result = await response.json();

							if (result.status === 'success') {
								// Hide the form and back link
								this.style.display = 'none';
								const backLinkContainer = document.getElementById('back-link-container');
								if (backLinkContainer) backLinkContainer.style.display = 'none';

								// Show success message
								const successMessage = document.createElement('p');
								successMessage.className = 'text-green-600 text-center mt-4';
								successMessage.textContent = 'We appreciate you taking the time to share your experience with us. Your feedback is valuable and helps us improve our services.';

								const formContainer = document.getElementById('feedback-form-container');
								if (formContainer) {
									formContainer.appendChild(successMessage);
								}
							} else {
								// Show error message
								const errorMessage = document.createElement('p');
								errorMessage.className = 'text-red-600 text-center mt-4';
								errorMessage.textContent = 'There was an error submitting your feedback. Please try again.';

								this.appendChild(errorMessage);

								// Remove error message after 5 seconds
								setTimeout(() => {
									errorMessage.remove();
								}, 5000);
							}
						} else {
							throw new Error('Network response was not ok');
						}
					} catch (error) {
						console.error('Error submitting form:', error);

						// Show error message
						const errorMessage = document.createElement('p');
						errorMessage.className = 'text-red-600 text-center mt-4';
						errorMessage.textContent = 'There was an error submitting your feedback. Please try again.';

						this.appendChild(errorMessage);

						// Remove error message after 5 seconds
						setTimeout(() => {
							errorMessage.remove();
						}, 5000);
					}
				});
			}
		}
	} else {
		// Add event listeners to each star button
		starButtons.forEach(button => {
			// Mouseover event
			button.addEventListener('mouseover', () => {
				starRating = parseInt(button.getAttribute('data-stars'));
				updateStars();
			});

			// Mouseout event
			button.addEventListener('mouseout', () => {
				starRating = selectedRating; // Use the selected rating instead of resetting to 0
				updateStars();
			});

			// Click event
			button.addEventListener('click', () => {
				const stars = parseInt(button.getAttribute('data-stars'));

				if (stars === 5) {
					// For 5 stars, open Google Review in a new tab
					window.open(settings.googleReview, '_blank');
				} else {
					// For 1-4 stars, redirect to the same page with query string
					window.location.href = `${window.location.pathname}?stars=${stars}`;
				}
			});
		});
	}
</script>
</body>
</html>
