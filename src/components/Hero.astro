---
import settings from "../settings.js";
---
<section class="relative pt-32 pb-20 bg-primary text-white overflow-hidden">
	<div class="absolute inset-0 z-0">
		<div class="w-full h-full bg-primary opacity-30 flex items-center justify-center">
			<img
				src="/images-optimized/hero/hero-hvac.webp"
				alt="HVAC technician working"
				class="w-full h-full object-cover"
				width="1920"
				height="1080"
				loading="eager"
				fetchpriority="high"
			/>
		</div>
		<div class="absolute inset-0 bg-primary/70"></div>
	</div>

	<div class="container relative z-10 mx-auto px-4 py-16 md:py-24">
		<div class="grid grid-cols-1 md:grid-cols-2 gap-8">
			<div>
				<h1 class="text-4xl md:text-5xl font-bold mb-6 font-heading">
					KEEPING YOUR SPACE COMFORTABLE IN EVERY SEASON
				</h1>
				<p class="text-xl md:text-2xl mb-8">
					PROUDLY SERVING BELTON & THE CENTRAL TEXAS AREA
				</p>
				<a
					href="#contact"
					class="inline-block bg-accent hover:bg-accent/90 text-white font-bold py-3 px-8 rounded-md transition-colors"
				>
					CONTACT US
				</a>
			</div>

			<div class="bg-white/10 p-6 rounded-lg backdrop-blur-sm border border-white/20">
				<h2 class="text-2xl font-bold mb-4 text-center">Get a Free Estimate</h2>
				<form class="space-y-4">
					<div>
						<label for="hero-name" class="block mb-1 font-medium">Name</label>
						<input
							type="text"
							id="hero-name"
							name="name"
							class="w-full px-4 py-2 rounded-md bg-white/10 border border-white/20 focus:border-secondary focus:outline-none focus:ring-2 focus:ring-secondary/50 text-white"
							placeholder="Your Name"
							required
						/>
					</div>

					<div>
						<label for="hero-phone" class="block mb-1 font-medium">Phone</label>
						<input
							type="tel"
							id="hero-phone"
							name="phone"
							class="w-full px-4 py-2 rounded-md bg-white/10 border border-white/20 focus:border-secondary focus:outline-none focus:ring-2 focus:ring-secondary/50 text-white"
							placeholder={settings.phonePlaceholder}
							required
						/>
					</div>


					<div>
						<label for="hero-service" class="block mb-1 font-medium">Service Needed</label>
						<select
							id="hero-service"
							name="service"
							class="w-full px-4 py-2 rounded-md bg-white/10 border border-white/20 focus:border-secondary focus:outline-none focus:ring-2 focus:ring-secondary/50 text-white"
							required
						>
							<option value="" disabled selected>Select a Service</option>
							<option value="ac-repair" class="text-black">AC Repair</option>
							<option value="ac-installation" class="text-black">AC Installation</option>
							<option value="heating-repair" class="text-black">Heating Repair</option>
							<option value="heating-installation" class="text-black">Heating Installation</option>
							<option value="maintenance" class="text-black">Maintenance</option>
							<option value="air-quality" class="text-black">Indoor Air Quality</option>
							<option value="other" class="text-black">Other</option>
						</select>
					</div>
					<input type="hidden" name="af-form" value="comp-hero"/>
					<input type="hidden" id="comp-hero-hash" name="af-hash" value="failed"/>
					<input type="hidden" id="comp-hero-url" name="af-url" value=""/>
					<button
						type="submit"
						class="w-full bg-secondary hover:bg-secondary/90 text-white font-bold py-2 px-4 rounded-md transition-colors"
					>
						SUBMIT
					</button>
				</form>
			</div>
		</div>
	</div>
</section>

<script>
	// Function to fetch refresh hash when the page loads
	async function fetchRefreshHash() {
		try {
			const response = await fetch('https://api.astraforms.site/', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({action: "forminit"}),
			});

			if (response.ok) {
				const data = await response.json();
				// Populate the hidden input field with the refresh hash
				const refreshHashInput = document.getElementById('comp-hero-hash') as HTMLInputElement;
				if (refreshHashInput) {
					refreshHashInput.value = data.hash || '';
				}
				const urlInput = document.getElementById('comp-hero-url') as HTMLInputElement;
				if (urlInput) {
					urlInput.value = window.location.href;
				}
			} else {
				console.error('Failed to fetch refresh hash');
			}
		} catch (error) {
			console.error('Error fetching refresh hash:', error);
		}
	}

	// Fetch refresh hash when the page loads
	document.addEventListener('DOMContentLoaded', fetchRefreshHash);

	// Handle form submission
	document.addEventListener('DOMContentLoaded', () => {
		const form = document.querySelector('form');
		if (!form) return;

		form.addEventListener('submit', async function (event) {
			event.preventDefault();

			// Create FormData object
			const formData = new FormData(this as HTMLFormElement);
			// Convert FormData to JSON object
			let formDataObj = Object.fromEntries(formData.entries());
			formDataObj.action ='submit';

			try {
				const response = await fetch('https://api.astraforms.site/', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(formDataObj),
				});

				if (response.ok) {
					const result = await response.json();

					if (result.status === 'success') {
						// Clear the form
						(this as HTMLFormElement).reset();
						// Fetch a new refresh hash
						await fetchRefreshHash();
						// Show a success message
						const successMessage = document.createElement('div');
						successMessage.className = 'p-3 bg-green-500 text-white rounded-md mt-4';
						successMessage.textContent = 'Your message has been sent successfully!';
						(this as HTMLFormElement).appendChild(successMessage);

						// Remove success message after 5 seconds
						setTimeout(() => {
							successMessage.remove();
						}, 5000);
					} else if (result.status === 'expired') {
						// Show expired message
						const expiredMessage = document.createElement('div');
						expiredMessage.className = 'p-3 bg-red-500 text-white rounded-md mt-4';
						expiredMessage.textContent = 'The form has expired. Please refresh the page and try again.';
						(this as HTMLFormElement).appendChild(expiredMessage);
					} else {
						// Show generic error message
						const errorMessage = document.createElement('div');
						errorMessage.className = 'p-3 bg-red-500 text-white rounded-md mt-4';
						errorMessage.textContent = 'There was an error submitting the form. Please try again.';
						(this as HTMLFormElement).appendChild(errorMessage);
					}
				} else {
					throw new Error('Network response was not ok');
				}
			} catch (error) {
				console.error('Error submitting form:', error);
				// Show error message
				const errorMessage = document.createElement('div');
				errorMessage.className = 'p-3 bg-red-500 text-white rounded-md mt-4';
				errorMessage.textContent = 'There was an error submitting the form. Please try again.';
				(this as HTMLFormElement).appendChild(errorMessage);
			}
		});
	});
</script>
